VideoCapture capture;
int FPS, totalframes, currentFrameNumber;
Mat currentFrame;

private void Form1_Load(object sender, EventArgs e) 
{
	currentFrameNumber = 1;
	string videoPath = @"C:\Users\Mark\Documents\Visual Studio 2022\2023_11_19\test1.mp4";
	if(File.Exists(videoPath)) 
	{
		capture = new VideoCapture(videoPath);
		currentFrame = new Mat();
		FPS = Convert.ToInt32(capture.Get(CapProp.FPS));
		totalFrames = Convert.ToInt32(capture.Get(CapProp.FrameCount));
		capture.Set(CapProp.PosFrames, currentFrameNumber);
		capture.Read(currentFrame);
		imageBoxVideo.Image = currentFrame.ToImage<Bgr, Byte>();
		imageBoxCurrentFrame.Image = currentFrame.ToImage<Gray, Byte>();
	}
	else 
	{
		throw new FileNotFoundException("A videofajl nem talalhato az adott eleresi uton. ");
	
	}
}

int GetRandomNeighborXCoordinate(int x)
{
	int xOffset;
	Random rand = new Random();
	if(x == width - 1) 
	{
		return x - 1;
	}
	if(x == 0)
	{
		xOffset = 1;
	}
	else
	{
		xOffset = rand.Next(-1, 2);
	}
	return x + xOffset;
}

int GetRandomNeighborYCoordinate(int y)
{
	int yOffset;
	Random rand = new Random();
	if(y == height - 1) 
	{
		return y - 1;
	}
	if(y == 0)
	{
		yOffset = 1;
	}
	else
	{
		yOffset = rand.Next(-1, 2);
	}
	return y + yOffset;
}

int N = 20;
int R = 20;
int min = 2;
int FI = 16;
int width, height;
byte[,,] samples;
Image<Gray, Byte> segMap;
byte background = 0;
byte foreground = 0;

private void ReinitializeModel(Image<Bgr, Byte> frameImage)
{
	segMap = new Image<Gray, Byte>(width, height);
	for(int x = 0; x < width; x++)
	{
		for(int y = 0; y < height; y++)
		{
			for(int i = 0; i < N; i++)
			{
				samples[x, y, i] = frameImage.Data[y, x, 0];
			}
		}
	}
}

private async void VibeAlgorithm(object sender, EventArgs e)
{
	width = Convert.ToInt32(capture.Get(CapProp.FrameWidth));
	height= Convert.ToInt32(capture.Get(CapProp.FrameHeight));
	Random rnd = new Random();
	int rand;
	segMap = new Image<Gray, Byte>(width, height);
	samples = new byte[width, height, N];
	for(int j = 0; j < totalFrames; j++) 
	{
		capture.Set(CapProp.PosFrames, j);
		currentFrame = capture.QueryFrame();
		currentFrame.Save(@"C:\Users\Mark\Documents\Visual Studio 2022\2023_11_19\framek\" + j + ".jpg");
		currentFrame.Dispose();
		StreamWriter frame_kiiras = new StreamWriter(@"C:\Users\Mark\Documents\Visual Studio 2022\2023_11_19\framek\fps.txt");
		frame_kiiras.WriteLine(Convert.ToString(FPS));
		frame_kiiras.Close();
		Mat frameRead = new Mat();
		capture.Set(CapProp.PosFrames, j);
		capture.Read(frameRead);
		Image<Bgr, Byte> frameImage = new Image<Bgr, Byte>();
		if(j == 0) 
		{
			ReinitializeModel(frameImage);
		}
		for(int x = 0; x < width; x++)
		{
			for(int y = 0; y < height; y++)
			{
				int count = 0;
				for(int i = 0; i < N; i++)
				{
					int dist = Math.Abs(frameImage.Data[y, x, 0] - samples[x, y, i]);
					if(dist < R)
					{
						count++;
					}
					if(count >= min) break;
				}
				if(count >= min)
				{
					segMap.Data[y, x, 0] = background;
					rand = rnd.Next(0, FI - 1);
					if(rand == 0)
					{
						int randModel = rnd.Next(0, N - 1);
						samples[x, y, randModel] = frameImage.Data[y, x, 0];
					}
					rand = rnd.Next(0, FI - 1);
					if(rand == 0)
					{
						int xNG = GetRandomNeighborXCoordinate(x);
						int yNG = GetRandomNeighborYCoordinate(y);
						if(xNG >= 0 && xNG < width && yNG >= 0 && yNG < height)
						{
							int randModel = rnd.Next(0, N - 1);
							samples[xNG, yNG, randModel] = frameImage.Data[y, x, 0];
						}
					}
				}
				else 
				{
					segMap.Data[y, x, 0] = foreground;
				}
			}
		}
		imageBoxVideo.Image = frameImage;
		imageBoxCurrentFrame.Image = segMap;
	}

}